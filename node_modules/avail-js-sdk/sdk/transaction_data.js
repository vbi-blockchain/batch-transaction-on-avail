"use strict";
// deno-lint-ignore-file no-namespace
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Staking = exports.DataAvailability = void 0;
const neverthrow_1 = require("neverthrow");
var DataAvailability;
(function (DataAvailability) {
    class SubmitData {
        constructor(data) {
            this.data = data;
        }
        static New(api, txHash, blockHash) {
            return __awaiter(this, void 0, void 0, function* () {
                const block = yield api.rpc.chain.getBlock(blockHash);
                const tx = block.block.extrinsics.find((tx) => tx.hash.toHex() == txHash.toHex());
                if (tx == undefined) {
                    return (0, neverthrow_1.err)("Failed to find submit data transaction.");
                }
                // Data retrieved from the extrinsic data
                let dataHex = tx.method.args.map((a) => a.toString()).join(", ");
                if (dataHex.startsWith("0x")) {
                    dataHex = dataHex.slice(2);
                }
                return (0, neverthrow_1.ok)(new SubmitData(dataHex));
            });
        }
    }
    DataAvailability.SubmitData = SubmitData;
})(DataAvailability || (exports.DataAvailability = DataAvailability = {}));
var Staking;
(function (Staking) {
    class Nominate {
        constructor(targets) {
            this.targets = targets;
        }
        static New(api, txHash, blockHash) {
            return __awaiter(this, void 0, void 0, function* () {
                const block = yield api.rpc.chain.getBlock(blockHash);
                const tx = block.block.extrinsics.find((tx) => tx.hash.toHex() == txHash.toHex());
                if (tx == undefined) {
                    return (0, neverthrow_1.err)("Failed to find nominate transaction.");
                }
                const targets = [];
                const txTargets = tx.method.args[0];
                for (let i = 0; i < txTargets.length; ++i) {
                    targets.push(txTargets[i].toString());
                }
                return (0, neverthrow_1.ok)(new Nominate(targets));
            });
        }
    }
    Staking.Nominate = Nominate;
})(Staking || (exports.Staking = Staking = {}));
