"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Events = exports.DataAvailability = void 0;
const neverthrow_1 = require("neverthrow");
const TransactionData = __importStar(require("./../transaction_data"));
const helpers_1 = require("../../helpers");
const common_1 = require("./common");
class DataAvailability {
    constructor(api) {
        this.api = api;
    }
    submitData(data, waitFor, account, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const optionWrapper = options || {};
            const maybeTxResult = yield new Promise((res, _) => {
                this.api.tx.dataAvailability
                    .submitData(data)
                    .signAndSend(account, optionWrapper, (result) => {
                    (0, common_1.standardCallback)(result, res, waitFor);
                })
                    .catch((reason) => {
                    res((0, neverthrow_1.err)(reason));
                });
            });
            if (maybeTxResult.isErr()) {
                return { isErr: true, reason: maybeTxResult.error };
            }
            const txResult = maybeTxResult.value;
            if (txResult.isError) {
                return { isErr: true, reason: "The transaction was dropped or something." };
            }
            const failed = txResult.events.find((e) => this.api.events.system.ExtrinsicFailed.is(e.event));
            if (failed != undefined) {
                return { isErr: true, reason: (0, helpers_1.decodeError)(this.api, failed.event.data[0]) };
            }
            const event = Events.DataSubmittedEvent.New(txResult.events);
            if (event == undefined) {
                return { isErr: true, reason: "Failed to find DataSubmitted event." };
            }
            const events = txResult.events;
            const [txHash, txIndex, blockHash, blockNumber] = yield (0, common_1.getBlockHashAndTxHash)(txResult, waitFor, this.api);
            const maybeTxData = yield TransactionData.DataAvailability.SubmitData.New(this.api, txHash, blockHash);
            if (maybeTxData.isErr()) {
                return { isErr: true, reason: maybeTxData.error };
            }
            return {
                isErr: false,
                txData: maybeTxData.value,
                event,
                events,
                txHash,
                txIndex,
                blockHash,
                blockNumber,
            };
        });
    }
    createApplicationKey(key, waitFor, account, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const optionWrapper = options || {};
            const maybeTxResult = yield new Promise((res, _) => {
                this.api.tx.dataAvailability
                    .createApplicationKey(key)
                    .signAndSend(account, optionWrapper, (result) => {
                    (0, common_1.standardCallback)(result, res, waitFor);
                })
                    .catch((reason) => {
                    res((0, neverthrow_1.err)(reason));
                });
            });
            if (maybeTxResult.isErr()) {
                return { isErr: true, reason: maybeTxResult.error };
            }
            const txResult = maybeTxResult.value;
            if (txResult.isError) {
                return { isErr: true, reason: "The transaction was dropped or something." };
            }
            const failed = txResult.events.find((e) => this.api.events.system.ExtrinsicFailed.is(e.event));
            if (failed != undefined) {
                return { isErr: true, reason: (0, helpers_1.decodeError)(this.api, failed.event.data[0]) };
            }
            const event = Events.ApplicationKeyCreatedEvent.New(txResult.events);
            if (event == undefined) {
                return { isErr: true, reason: "Failed to find ApplicationKeyCreated event." };
            }
            const events = txResult.events;
            const [txHash, txIndex, blockHash, blockNumber] = yield (0, common_1.getBlockHashAndTxHash)(txResult, waitFor, this.api);
            return { isErr: false, event, events, txHash, txIndex, blockHash, blockNumber };
        });
    }
    setApplicationKey(oldKey, newKey, waitFor, account, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const optionWrapper = options || {};
            const maybeTxResult = yield new Promise((res, _) => {
                const call = this.api.tx.dataAvailability.setApplicationKey(oldKey, newKey);
                this.api.tx.sudo
                    .sudo(call)
                    .signAndSend(account, optionWrapper, (result) => {
                    (0, common_1.standardCallback)(result, res, waitFor);
                })
                    .catch((reason) => {
                    res((0, neverthrow_1.err)(reason));
                });
            });
            if (maybeTxResult.isErr()) {
                return { isErr: true, reason: maybeTxResult.error };
            }
            const txResult = maybeTxResult.value;
            if (txResult.isError) {
                return { isErr: true, reason: "The transaction was dropped or something." };
            }
            const failed = txResult.events.find((e) => this.api.events.system.ExtrinsicFailed.is(e.event));
            if (failed != undefined) {
                return { isErr: true, reason: (0, helpers_1.decodeError)(this.api, failed.event.data[0]) };
            }
            const sudoEvent = txResult.events.find((e) => e.event.method == "Sudid");
            if (sudoEvent == undefined) {
                return { isErr: true, reason: "Failed to find Sudid event." };
            }
            const sudoResult = sudoEvent.event.data.sudoResult;
            if (sudoResult.isErr) {
                return { isErr: true, isFailure: true, reason: (0, helpers_1.decodeError)(this.api, sudoResult.asErr) };
            }
            const event = Events.ApplicationKeySetEvent.New(txResult.events);
            if (event == undefined) {
                return { isErr: true, reason: "Failed to find ApplicationKeySet event." };
            }
            const events = txResult.events;
            const [txHash, txIndex, blockHash, blockNumber] = yield (0, common_1.getBlockHashAndTxHash)(txResult, waitFor, this.api);
            return { isErr: false, event, events, txHash, txIndex, blockHash, blockNumber };
        });
    }
    submitBlockLengthProposal(rows, cols, waitFor, account, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const optionWrapper = options || {};
            const maybeTxResult = yield new Promise((res, _) => {
                const call = this.api.tx.dataAvailability.submitBlockLengthProposal(rows, cols);
                this.api.tx.sudo
                    .sudo(call)
                    .signAndSend(account, optionWrapper, (result) => {
                    (0, common_1.standardCallback)(result, res, waitFor);
                })
                    .catch((reason) => {
                    res((0, neverthrow_1.err)(reason));
                });
            });
            if (maybeTxResult.isErr()) {
                return { isErr: true, reason: maybeTxResult.error };
            }
            const txResult = maybeTxResult.value;
            if (txResult.isError) {
                return { isErr: true, reason: "The transaction was dropped or something." };
            }
            const failed = txResult.events.find((e) => this.api.events.system.ExtrinsicFailed.is(e.event));
            if (failed != undefined) {
                return { isErr: true, reason: (0, helpers_1.decodeError)(this.api, failed.event.data[0]) };
            }
            const sudoEvent = txResult.events.find((e) => e.event.method == "Sudid");
            if (sudoEvent == undefined) {
                return { isErr: true, reason: "Failed to find Sudid event." };
            }
            const sudoResult = sudoEvent.event.data.sudoResult;
            if (sudoResult.isErr) {
                return { isErr: true, isFailure: true, reason: (0, helpers_1.decodeError)(this.api, sudoResult.asErr) };
            }
            const event = Events.BlockLengthProposalSubmittedEvent.New(txResult.events);
            if (event == undefined) {
                return { isErr: true, reason: "Failed to find BlockLengthProposalSubmitted event." };
            }
            const events = txResult.events;
            const [txHash, txIndex, blockHash, blockNumber] = yield (0, common_1.getBlockHashAndTxHash)(txResult, waitFor, this.api);
            return {
                isErr: false,
                event,
                events,
                txHash,
                txIndex,
                blockHash,
                blockNumber,
            };
        });
    }
    setSubmitDataFeeModifier(modifier, waitFor, account, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const optionWrapper = options || {};
            const maybeTxResult = yield new Promise((res, _) => {
                const call = this.api.tx.dataAvailability.setSubmitDataFeeModifier(modifier);
                this.api.tx.sudo
                    .sudo(call)
                    .signAndSend(account, optionWrapper, (result) => {
                    (0, common_1.standardCallback)(result, res, waitFor);
                })
                    .catch((reason) => {
                    res((0, neverthrow_1.err)(reason));
                });
            });
            if (maybeTxResult.isErr()) {
                return { isErr: true, reason: maybeTxResult.error };
            }
            const txResult = maybeTxResult.value;
            if (txResult.isError) {
                return { isErr: true, reason: "The transaction was dropped or something." };
            }
            const failed = txResult.events.find((e) => this.api.events.system.ExtrinsicFailed.is(e.event));
            if (failed != undefined) {
                return { isErr: true, reason: (0, helpers_1.decodeError)(this.api, failed.event.data[0]) };
            }
            const sudoEvent = txResult.events.find((e) => e.event.method == "Sudid");
            if (sudoEvent == undefined) {
                return { isErr: true, reason: "Failed to find Sudid event." };
            }
            const sudoResult = sudoEvent.event.data.sudoResult;
            if (sudoResult.isErr) {
                return { isErr: true, isFailure: true, reason: (0, helpers_1.decodeError)(this.api, sudoResult.asErr) };
            }
            const event = Events.SubmitDataFeeModifierSetEvent.New(txResult.events);
            if (event == undefined) {
                return { isErr: true, reason: "Failed to find SubmitDataFeeModifierSet event." };
            }
            const events = txResult.events;
            const [txHash, txIndex, blockHash, blockNumber] = yield (0, common_1.getBlockHashAndTxHash)(txResult, waitFor, this.api);
            return { isErr: false, event, events, txHash, txIndex, blockHash, blockNumber };
        });
    }
}
exports.DataAvailability = DataAvailability;
var Events;
(function (Events) {
    class DataSubmittedEvent {
        constructor(who, dataHash) {
            this.who = who;
            this.dataHash = dataHash;
        }
        static New(events) {
            var _a;
            const ed = (_a = events.find((e) => e.event.method == "DataSubmitted")) === null || _a === void 0 ? void 0 : _a.event.data;
            if (ed == undefined) {
                return undefined;
            }
            return new DataSubmittedEvent(ed["who"].toString(), ed["dataHash"].toString());
        }
    }
    Events.DataSubmittedEvent = DataSubmittedEvent;
    class ApplicationKeyCreatedEvent {
        constructor(key, owner, id) {
            this.key = key;
            this.owner = owner;
            this.id = id;
        }
        static New(events) {
            var _a;
            const ed = (_a = events.find((e) => e.event.method == "ApplicationKeyCreated")) === null || _a === void 0 ? void 0 : _a.event.data;
            if (ed == undefined) {
                return undefined;
            }
            return new ApplicationKeyCreatedEvent(ed["key"].toString(), ed["owner"].toString(), ed["id"].toString());
        }
    }
    Events.ApplicationKeyCreatedEvent = ApplicationKeyCreatedEvent;
    class ApplicationKeySetEvent {
        constructor(oldKey, newKey) {
            this.oldKey = oldKey;
            this.newKey = newKey;
        }
        static New(events) {
            var _a;
            const ed = (_a = events.find((e) => e.event.method == "ApplicationKeySet")) === null || _a === void 0 ? void 0 : _a.event.data;
            if (ed == undefined) {
                return undefined;
            }
            return new ApplicationKeySetEvent((0, helpers_1.fromHexToAscii)(ed["oldKey"].toString()), (0, helpers_1.fromHexToAscii)(ed["newKey"].toString()));
        }
    }
    Events.ApplicationKeySetEvent = ApplicationKeySetEvent;
    class BlockLengthProposalSubmittedEvent {
        constructor(rows, cols) {
            this.rows = rows;
            this.cols = cols;
        }
        static New(events) {
            var _a;
            const ed = (_a = events.find((e) => e.event.method == "BlockLengthProposalSubmitted")) === null || _a === void 0 ? void 0 : _a.event.data;
            if (ed == undefined) {
                return undefined;
            }
            return new BlockLengthProposalSubmittedEvent(ed["rows"].toString(), ed["cols"].toString());
        }
    }
    Events.BlockLengthProposalSubmittedEvent = BlockLengthProposalSubmittedEvent;
    class SubmitDataFeeModifierSetEvent {
        constructor(weightMaximumFee, weightFeeDivider, weightFeeMultiplier) {
            this.weightMaximumFee = weightMaximumFee;
            this.weightFeeDivider = weightFeeDivider;
            this.weightFeeMultiplier = weightFeeMultiplier;
        }
        static New(events) {
            var _a, _b, _c, _d;
            const ed = (_a = events.find((e) => e.event.method == "SubmitDataFeeModifierSet")) === null || _a === void 0 ? void 0 : _a.event.data;
            if (ed == undefined) {
                return undefined;
            }
            return new SubmitDataFeeModifierSetEvent((_b = ed["weightMaximumFee"]) === null || _b === void 0 ? void 0 : _b.toString(), (_c = ed["weightFeeDivider"]) === null || _c === void 0 ? void 0 : _c.toString(), (_d = ed["weightFeeMultiplier"]) === null || _d === void 0 ? void 0 : _d.toString());
        }
    }
    Events.SubmitDataFeeModifierSetEvent = SubmitDataFeeModifierSetEvent;
})(Events || (exports.Events = Events = {}));
