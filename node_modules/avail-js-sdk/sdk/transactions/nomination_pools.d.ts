/// <reference types="bn.js" />
import { ApiPromise } from "@polkadot/api";
import { H256, EventRecord } from "@polkadot/types/interfaces/types";
import { BN } from "@polkadot/util";
import { KeyringPair } from "@polkadot/keyring/types";
import { WaitFor, GenericFailure, TransactionOptions } from "./common";
export interface BondExtra {
    FreeBalance?: BN;
    Rewards?: null;
}
export type ClaimPermission = "Permissioned" | "PermissionlessCompound" | "PermissionlessWithdraw" | "PermissionlessAll";
export type PoolState = "Open" | "Blocked" | "Destroying";
export interface NewCommission {
    amount: number;
    payee: string;
}
type PoolCreateTxSuccess = {
    isErr: false;
    event: Events.Created;
    event2: Events.Bonded;
    events: EventRecord[];
    txHash: H256;
    txIndex: number;
    blockHash: H256;
    blockNumber: number;
};
type PoolCreateWithPoolIdTxSuccess = {
    isErr: false;
    event: Events.Created;
    event2: Events.Bonded;
    events: EventRecord[];
    txHash: H256;
    txIndex: number;
    blockHash: H256;
    blockNumber: number;
};
type PoolJoinTxSuccess = {
    isErr: false;
    event: Events.Bonded;
    events: EventRecord[];
    txHash: H256;
    txIndex: number;
    blockHash: H256;
    blockNumber: number;
};
type PoolNominateTxSuccess = {
    isErr: false;
    events: EventRecord[];
    txHash: H256;
    txIndex: number;
    blockHash: H256;
    blockNumber: number;
};
type PoolBondExtraTxSuccess = {
    isErr: false;
    event: Events.Bonded;
    events: EventRecord[];
    txHash: H256;
    txIndex: number;
    blockHash: H256;
    blockNumber: number;
};
type PoolSetMetadataTxSuccess = {
    isErr: false;
    events: EventRecord[];
    txHash: H256;
    txIndex: number;
    blockHash: H256;
    blockNumber: number;
};
type PoolUnbondTxSuccess = {
    isErr: false;
    event?: Events.Unbonded;
    events: EventRecord[];
    txHash: H256;
    txIndex: number;
    blockHash: H256;
    blockNumber: number;
};
type PoolChillTxSuccess = {
    isErr: false;
    events: EventRecord[];
    txHash: H256;
    txIndex: number;
    blockHash: H256;
    blockNumber: number;
};
type PoolClaimCommissionTxSuccess = {
    isErr: false;
    event: Events.PoolCommissionClaimed;
    events: EventRecord[];
    txHash: H256;
    txIndex: number;
    blockHash: H256;
    blockNumber: number;
};
type PoolClaimPayoutTxSuccess = {
    isErr: false;
    event?: Events.PaidOut;
    events: EventRecord[];
    txHash: H256;
    txIndex: number;
    blockHash: H256;
    blockNumber: number;
};
type PoolClaimPayoutOtherTxSuccess = {
    isErr: false;
    event?: Events.PaidOut;
    events: EventRecord[];
    txHash: H256;
    txIndex: number;
    blockHash: H256;
    blockNumber: number;
};
type PoolSetClaimPermissionOtherTxSuccess = {
    isErr: false;
    events: EventRecord[];
    txHash: H256;
    txIndex: number;
    blockHash: H256;
    blockNumber: number;
};
type PoolSetCommissionTxSuccess = {
    isErr: false;
    event: Events.PoolCommissionUpdated;
    events: EventRecord[];
    txHash: H256;
    txIndex: number;
    blockHash: H256;
    blockNumber: number;
};
type PoolWithdrawUnbodedTxSuccess = {
    isErr: false;
    event: Events.Withdrawn;
    events: EventRecord[];
    txHash: H256;
    txIndex: number;
    blockHash: H256;
    blockNumber: number;
};
type PoolSetStateTxSuccess = {
    isErr: false;
    event?: Events.StateChanged;
    events: EventRecord[];
    txHash: H256;
    txIndex: number;
    blockHash: H256;
    blockNumber: number;
};
export declare class NominationPools {
    private api;
    constructor(api: ApiPromise);
    create(amount: BN, root: string, nominator: string, bouncer: string, waitFor: WaitFor, account: KeyringPair, options?: TransactionOptions): Promise<PoolCreateTxSuccess | GenericFailure>;
    createWithPoolId(amount: BN, root: string, nominator: string, bouncer: string, poolId: number, waitFor: WaitFor, account: KeyringPair, options?: TransactionOptions): Promise<PoolCreateWithPoolIdTxSuccess | GenericFailure>;
    join(amount: BN, poolId: number, waitFor: WaitFor, account: KeyringPair, options?: TransactionOptions): Promise<PoolJoinTxSuccess | GenericFailure>;
    nominate(poolId: number, validators: string[], waitFor: WaitFor, account: KeyringPair, options?: TransactionOptions): Promise<PoolNominateTxSuccess | GenericFailure>;
    bondExtra(extra: BondExtra, waitFor: WaitFor, account: KeyringPair, options?: TransactionOptions): Promise<PoolBondExtraTxSuccess | GenericFailure>;
    setMetadata(poolId: number, metadata: string, waitFor: WaitFor, account: KeyringPair, options?: TransactionOptions): Promise<PoolSetMetadataTxSuccess | GenericFailure>;
    unbond(memberAccount: string, unbondingPoints: BN, waitFor: WaitFor, account: KeyringPair, options?: TransactionOptions): Promise<PoolUnbondTxSuccess | GenericFailure>;
    chill(poolId: number, waitFor: WaitFor, account: KeyringPair, options?: TransactionOptions): Promise<PoolChillTxSuccess | GenericFailure>;
    claimCommission(poolId: number, waitFor: WaitFor, account: KeyringPair, options?: TransactionOptions): Promise<PoolClaimCommissionTxSuccess | GenericFailure>;
    claimPayout(waitFor: WaitFor, account: KeyringPair, options?: TransactionOptions): Promise<PoolClaimPayoutTxSuccess | GenericFailure>;
    claimPayoutOther(other: string, waitFor: WaitFor, account: KeyringPair, options?: TransactionOptions): Promise<PoolClaimPayoutOtherTxSuccess | GenericFailure>;
    setClaimPermission(permission: ClaimPermission, waitFor: WaitFor, account: KeyringPair, options?: TransactionOptions): Promise<PoolSetClaimPermissionOtherTxSuccess | GenericFailure>;
    setCommission(poolId: number, newCommission: NewCommission | null, waitFor: WaitFor, account: KeyringPair, options?: TransactionOptions): Promise<PoolSetCommissionTxSuccess | GenericFailure>;
    withdrawUnbonded(memberAccount: string, numSlashingSpans: number, waitFor: WaitFor, account: KeyringPair, options?: TransactionOptions): Promise<PoolWithdrawUnbodedTxSuccess | GenericFailure>;
    setState(poolId: number, state: PoolState, waitFor: WaitFor, account: KeyringPair, options?: TransactionOptions): Promise<PoolSetStateTxSuccess | GenericFailure>;
}
declare namespace Events {
    class Bonded {
        member: string;
        poolId: string;
        bonded: string;
        joined: string;
        constructor(member: string, poolId: string, bonded: string, joined: string);
        static New(events: EventRecord[]): Bonded | undefined;
    }
    class Created {
        depositor: string;
        poolId: string;
        constructor(depositor: string, poolId: string);
        static New(events: EventRecord[]): Created | undefined;
    }
    class Unbonded {
        member: string;
        poolId: string;
        balance: string;
        points: string;
        era: string;
        constructor(member: string, poolId: string, balance: string, points: string, era: string);
        static New(events: EventRecord[]): Unbonded | undefined;
    }
    class PoolCommissionClaimed {
        poolId: string;
        commission: string;
        constructor(poolId: string, commission: string);
        static New(events: EventRecord[]): PoolCommissionClaimed | undefined;
    }
    class PaidOut {
        member: string;
        poolId: string;
        payout: string;
        constructor(member: string, poolId: string, payout: string);
        static New(events: EventRecord[]): PaidOut | undefined;
    }
    class PoolCommissionUpdated {
        poolId: string;
        current: string;
        constructor(poolId: string, current: string);
        static New(events: EventRecord[]): PoolCommissionUpdated | undefined;
    }
    class Withdrawn {
        member: string;
        poolId: string;
        balance: string;
        points: string;
        constructor(member: string, poolId: string, balance: string, points: string);
        static New(events: EventRecord[]): Withdrawn | undefined;
    }
    class StateChanged {
        poolId: string;
        newState: string;
        constructor(poolId: string, newState: string);
        static New(events: EventRecord[]): StateChanged | undefined;
    }
}
export {};
