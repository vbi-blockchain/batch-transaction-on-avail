"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Events = exports.Balances = void 0;
const neverthrow_1 = require("neverthrow");
const helpers_1 = require("../../helpers");
const common_1 = require("./common");
class Balances {
    constructor(api) {
        this.api = api;
    }
    transferAll(dest, keepAlive, waitFor, account, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const optionWrapper = options || {};
            const maybeTxResult = yield new Promise((res, _) => {
                this.api.tx.balances
                    .transferAll(dest, keepAlive)
                    .signAndSend(account, optionWrapper, (result) => {
                    (0, common_1.standardCallback)(result, res, waitFor);
                })
                    .catch((reason) => {
                    res((0, neverthrow_1.err)(reason));
                });
            });
            if (maybeTxResult.isErr()) {
                return { isErr: true, reason: maybeTxResult.error };
            }
            const txResult = maybeTxResult.value;
            if (txResult.isError) {
                return { isErr: true, reason: "The transaction was dropped or something." };
            }
            const failed = txResult.events.find((e) => this.api.events.system.ExtrinsicFailed.is(e.event));
            if (failed != undefined) {
                return { isErr: true, reason: (0, helpers_1.decodeError)(this.api, failed.event.data[0]) };
            }
            const event = Events.TransferEvent.New(txResult.events);
            if (event == undefined) {
                return { isErr: true, reason: "Failed to find Transfer event." };
            }
            const event2 = Events.KilledAccount.New(txResult.events);
            const events = txResult.events;
            const [txHash, txIndex, blockHash, blockNumber] = yield (0, common_1.getBlockHashAndTxHash)(txResult, waitFor, this.api);
            return { isErr: false, event, event2, events, txHash, txIndex, blockHash, blockNumber };
        });
    }
    transferAllowDeath(dest, value, waitFor, account, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const optionWrapper = options || {};
            const maybeTxResult = yield new Promise((res, _) => {
                this.api.tx.balances
                    .transferAllowDeath(dest, value)
                    .signAndSend(account, optionWrapper, (result) => {
                    (0, common_1.standardCallback)(result, res, waitFor);
                })
                    .catch((reason) => {
                    res((0, neverthrow_1.err)(reason));
                });
            });
            if (maybeTxResult.isErr()) {
                return { isErr: true, reason: maybeTxResult.error };
            }
            const txResult = maybeTxResult.value;
            if (txResult.isError) {
                return { isErr: true, reason: "The transaction was dropped or something." };
            }
            const failed = txResult.events.find((e) => this.api.events.system.ExtrinsicFailed.is(e.event));
            if (failed != undefined) {
                return { isErr: true, reason: (0, helpers_1.decodeError)(this.api, failed.event.data[0]) };
            }
            const event = Events.TransferEvent.New(txResult.events);
            if (event == undefined) {
                return { isErr: true, reason: "Failed to find Transfer event." };
            }
            const event2 = Events.KilledAccount.New(txResult.events);
            const events = txResult.events;
            const [txHash, txIndex, blockHash, blockNumber] = yield (0, common_1.getBlockHashAndTxHash)(txResult, waitFor, this.api);
            return {
                isErr: false,
                event,
                event2,
                events,
                txHash,
                txIndex,
                blockHash,
                blockNumber,
            };
        });
    }
    transferKeepAlive(dest, value, waitFor, account, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const optionWrapper = options || {};
            const maybeTxResult = yield new Promise((res, _) => {
                this.api.tx.balances
                    .transferKeepAlive(dest, value)
                    .signAndSend(account, optionWrapper, (result) => {
                    (0, common_1.standardCallback)(result, res, waitFor);
                })
                    .catch((reason) => {
                    res((0, neverthrow_1.err)(reason));
                });
            });
            if (maybeTxResult.isErr()) {
                return { isErr: true, reason: maybeTxResult.error };
            }
            const txResult = maybeTxResult.value;
            if (txResult.isError) {
                return { isErr: true, reason: "The transaction was dropped or something." };
            }
            const failed = txResult.events.find((e) => this.api.events.system.ExtrinsicFailed.is(e.event));
            if (failed != undefined) {
                return { isErr: true, reason: (0, helpers_1.decodeError)(this.api, failed.event.data[0]) };
            }
            const event = Events.TransferEvent.New(txResult.events);
            if (event == undefined) {
                return { isErr: true, reason: "Failed to find Transfer event." };
            }
            const events = txResult.events;
            const [txHash, txIndex, blockHash, blockNumber] = yield (0, common_1.getBlockHashAndTxHash)(txResult, waitFor, this.api);
            return { isErr: false, event, events, txHash, txIndex, blockHash, blockNumber };
        });
    }
}
exports.Balances = Balances;
var Events;
(function (Events) {
    class TransferEvent {
        constructor(from, to, amount) {
            this.from = from;
            this.to = to;
            this.amount = amount;
        }
        static New(events) {
            var _a;
            const ed = (_a = events.find((e) => e.event.method == "Transfer")) === null || _a === void 0 ? void 0 : _a.event.data;
            if (ed == undefined) {
                return undefined;
            }
            return new TransferEvent(ed["from"].toString(), ed["to"].toString(), ed["amount"].toString());
        }
    }
    Events.TransferEvent = TransferEvent;
    class KilledAccount {
        constructor(account) {
            this.account = account;
        }
        static New(events) {
            var _a;
            const ed = (_a = events.find((e) => e.event.method == "KilledAccount" && e.event.section == "system")) === null || _a === void 0 ? void 0 : _a.event.data;
            if (ed == undefined) {
                return undefined;
            }
            return new KilledAccount(ed["account"].toString());
        }
    }
    Events.KilledAccount = KilledAccount;
})(Events || (exports.Events = Events = {}));
