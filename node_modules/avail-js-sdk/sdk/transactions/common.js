"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBlockHashAndTxHash = exports.standardCallback = exports.WaitFor = void 0;
const neverthrow_1 = require("neverthrow");
var WaitFor;
(function (WaitFor) {
    WaitFor[WaitFor["BlockInclusion"] = 0] = "BlockInclusion";
    WaitFor[WaitFor["BlockFinalization"] = 1] = "BlockFinalization";
})(WaitFor || (exports.WaitFor = WaitFor = {}));
function standardCallback(result_in, result_out, waitFor) {
    if (result_in.isError) {
        result_out((0, neverthrow_1.ok)(result_in));
    }
    if (result_in.isInBlock && waitFor == WaitFor.BlockInclusion) {
        result_out((0, neverthrow_1.ok)(result_in));
    }
    if (result_in.isFinalized) {
        result_out((0, neverthrow_1.ok)(result_in));
    }
}
exports.standardCallback = standardCallback;
function getBlockHashAndTxHash(result, waitFor, api) {
    return __awaiter(this, void 0, void 0, function* () {
        const txHash = result.txHash;
        const txIndex = result.txIndex || 22;
        let blockHash = txHash;
        if (waitFor == WaitFor.BlockFinalization) {
            blockHash = result.status.asFinalized;
        }
        else {
            blockHash = result.status.asInBlock;
        }
        const header = yield api.rpc.chain.getHeader(blockHash);
        const blockNumber = header.number.toNumber();
        return [txHash, txIndex, blockHash, blockNumber];
    });
}
exports.getBlockHashAndTxHash = getBlockHashAndTxHash;
