"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NominationPools = void 0;
const neverthrow_1 = require("neverthrow");
const helpers_1 = require("../../helpers");
const common_1 = require("./common");
const utils_1 = require("../utils");
class NominationPools {
    constructor(api) {
        this.api = api;
    }
    create(amount, root, nominator, bouncer, waitFor, account, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const optionWrapper = options || {};
            const maybeTxResult = yield new Promise((res, _) => {
                this.api.tx.nominationPools
                    .create(amount, root, nominator, bouncer)
                    .signAndSend(account, optionWrapper, (result) => {
                    (0, common_1.standardCallback)(result, res, waitFor);
                })
                    .catch((reason) => {
                    res((0, neverthrow_1.err)(reason));
                });
            });
            if (maybeTxResult.isErr()) {
                return { isErr: true, reason: maybeTxResult.error };
            }
            const txResult = maybeTxResult.value;
            if (txResult.isError) {
                return { isErr: true, reason: "The transaction was dropped or something." };
            }
            const events = txResult.events;
            const failed = events.find((e) => this.api.events.system.ExtrinsicFailed.is(e.event));
            if (failed != undefined) {
                return { isErr: true, reason: (0, helpers_1.decodeError)(this.api, failed.event.data[0]) };
            }
            const event = Events.Created.New(txResult.events);
            if (event == undefined) {
                return { isErr: true, reason: "Failed to find Created event." };
            }
            const event2 = Events.Bonded.New(txResult.events);
            if (event2 == undefined) {
                return { isErr: true, reason: "Failed to find Bonded event." };
            }
            const [txHash, txIndex, blockHash, blockNumber] = yield (0, common_1.getBlockHashAndTxHash)(txResult, waitFor, this.api);
            return { isErr: false, event, event2, events, txHash, txIndex, blockHash, blockNumber };
        });
    }
    createWithPoolId(amount, root, nominator, bouncer, poolId, waitFor, account, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const optionWrapper = options || {};
            const maybeTxResult = yield new Promise((res, _) => {
                this.api.tx.nominationPools
                    .createWithPoolId(amount, root, nominator, bouncer, poolId)
                    .signAndSend(account, optionWrapper, (result) => {
                    (0, common_1.standardCallback)(result, res, waitFor);
                })
                    .catch((reason) => {
                    res((0, neverthrow_1.err)(reason));
                });
            });
            if (maybeTxResult.isErr()) {
                return { isErr: true, reason: maybeTxResult.error };
            }
            const txResult = maybeTxResult.value;
            if (txResult.isError) {
                return { isErr: true, reason: "The transaction was dropped or something." };
            }
            const events = txResult.events;
            const failed = events.find((e) => this.api.events.system.ExtrinsicFailed.is(e.event));
            if (failed != undefined) {
                return { isErr: true, reason: (0, helpers_1.decodeError)(this.api, failed.event.data[0]) };
            }
            const event = Events.Created.New(txResult.events);
            if (event == undefined) {
                return { isErr: true, reason: "Failed to find Created event." };
            }
            const event2 = Events.Bonded.New(txResult.events);
            if (event2 == undefined) {
                return { isErr: true, reason: "Failed to find Bonded event." };
            }
            const [txHash, txIndex, blockHash, blockNumber] = yield (0, common_1.getBlockHashAndTxHash)(txResult, waitFor, this.api);
            return {
                isErr: false,
                event,
                event2,
                events,
                txHash,
                txIndex,
                blockHash,
                blockNumber,
            };
        });
    }
    join(amount, poolId, waitFor, account, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const optionWrapper = options || {};
            const maybeTxResult = yield new Promise((res, _) => {
                this.api.tx.nominationPools
                    .join(amount, poolId)
                    .signAndSend(account, optionWrapper, (result) => {
                    (0, common_1.standardCallback)(result, res, waitFor);
                })
                    .catch((reason) => {
                    res((0, neverthrow_1.err)(reason));
                });
            });
            if (maybeTxResult.isErr()) {
                return { isErr: true, reason: maybeTxResult.error };
            }
            const txResult = maybeTxResult.value;
            if (txResult.isError) {
                return { isErr: true, reason: "The transaction was dropped or something." };
            }
            const events = txResult.events;
            const failed = events.find((e) => this.api.events.system.ExtrinsicFailed.is(e.event));
            if (failed != undefined) {
                return { isErr: true, reason: (0, helpers_1.decodeError)(this.api, failed.event.data[0]) };
            }
            const event = Events.Bonded.New(txResult.events);
            if (event == undefined) {
                return { isErr: true, reason: "Failed to find Bonded event." };
            }
            const [txHash, txIndex, blockHash, blockNumber] = yield (0, common_1.getBlockHashAndTxHash)(txResult, waitFor, this.api);
            return { isErr: false, event, events, txHash, txIndex, blockHash, blockNumber };
        });
    }
    nominate(poolId, validators, waitFor, account, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const optionWrapper = options || {};
            const maybeTxResult = yield new Promise((res, _) => {
                this.api.tx.nominationPools
                    .nominate(poolId, validators)
                    .signAndSend(account, optionWrapper, (result) => {
                    (0, common_1.standardCallback)(result, res, waitFor);
                })
                    .catch((reason) => {
                    res((0, neverthrow_1.err)(reason));
                });
            });
            if (maybeTxResult.isErr()) {
                return { isErr: true, reason: maybeTxResult.error };
            }
            const txResult = maybeTxResult.value;
            if (txResult.isError) {
                return { isErr: true, reason: "The transaction was dropped or something." };
            }
            const events = txResult.events;
            const failed = events.find((e) => this.api.events.system.ExtrinsicFailed.is(e.event));
            if (failed != undefined) {
                return { isErr: true, reason: (0, helpers_1.decodeError)(this.api, failed.event.data[0]) };
            }
            const [txHash, txIndex, blockHash, blockNumber] = yield (0, common_1.getBlockHashAndTxHash)(txResult, waitFor, this.api);
            return { isErr: false, events, txHash, txIndex, blockHash, blockNumber };
        });
    }
    bondExtra(extra, waitFor, account, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const optionWrapper = options || {};
            const maybeTxResult = yield new Promise((res, _) => {
                this.api.tx.nominationPools
                    .bondExtra(extra)
                    .signAndSend(account, optionWrapper, (result) => {
                    (0, common_1.standardCallback)(result, res, waitFor);
                })
                    .catch((reason) => {
                    res((0, neverthrow_1.err)(reason));
                });
            });
            if (maybeTxResult.isErr()) {
                return { isErr: true, reason: maybeTxResult.error };
            }
            const txResult = maybeTxResult.value;
            if (txResult.isError) {
                return { isErr: true, reason: "The transaction was dropped or something." };
            }
            const events = txResult.events;
            const failed = events.find((e) => this.api.events.system.ExtrinsicFailed.is(e.event));
            if (failed != undefined) {
                return { isErr: true, reason: (0, helpers_1.decodeError)(this.api, failed.event.data[0]) };
            }
            const event = Events.Bonded.New(txResult.events);
            if (event == undefined) {
                return { isErr: true, reason: "Failed to find Bonded event." };
            }
            const [txHash, txIndex, blockHash, blockNumber] = yield (0, common_1.getBlockHashAndTxHash)(txResult, waitFor, this.api);
            return { isErr: false, event, events, txHash, txIndex, blockHash, blockNumber };
        });
    }
    setMetadata(poolId, metadata, waitFor, account, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const optionWrapper = options || {};
            const maybeTxResult = yield new Promise((res, _) => {
                this.api.tx.nominationPools
                    .setMetadata(poolId, metadata)
                    .signAndSend(account, optionWrapper, (result) => {
                    (0, common_1.standardCallback)(result, res, waitFor);
                })
                    .catch((reason) => {
                    res((0, neverthrow_1.err)(reason));
                });
            });
            if (maybeTxResult.isErr()) {
                return { isErr: true, reason: maybeTxResult.error };
            }
            const txResult = maybeTxResult.value;
            if (txResult.isError) {
                return { isErr: true, reason: "The transaction was dropped or something." };
            }
            const events = txResult.events;
            const failed = events.find((e) => this.api.events.system.ExtrinsicFailed.is(e.event));
            if (failed != undefined) {
                return { isErr: true, reason: (0, helpers_1.decodeError)(this.api, failed.event.data[0]) };
            }
            const [txHash, txIndex, blockHash, blockNumber] = yield (0, common_1.getBlockHashAndTxHash)(txResult, waitFor, this.api);
            return { isErr: false, events, txHash, txIndex, blockHash, blockNumber };
        });
    }
    unbond(memberAccount, unbondingPoints, waitFor, account, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const optionWrapper = options || {};
            const maybeTxResult = yield new Promise((res, _) => {
                this.api.tx.nominationPools
                    .unbond(memberAccount, unbondingPoints)
                    .signAndSend(account, optionWrapper, (result) => {
                    (0, common_1.standardCallback)(result, res, waitFor);
                })
                    .catch((reason) => {
                    res((0, neverthrow_1.err)(reason));
                });
            });
            if (maybeTxResult.isErr()) {
                return { isErr: true, reason: maybeTxResult.error };
            }
            const txResult = maybeTxResult.value;
            if (txResult.isError) {
                return { isErr: true, reason: "The transaction was dropped or something." };
            }
            const events = txResult.events;
            const failed = events.find((e) => this.api.events.system.ExtrinsicFailed.is(e.event));
            if (failed != undefined) {
                return { isErr: true, reason: (0, helpers_1.decodeError)(this.api, failed.event.data[0]) };
            }
            const event = Events.Unbonded.New(txResult.events);
            const [txHash, txIndex, blockHash, blockNumber] = yield (0, common_1.getBlockHashAndTxHash)(txResult, waitFor, this.api);
            return { isErr: false, event, events, txHash, txIndex, blockHash, blockNumber };
        });
    }
    chill(poolId, waitFor, account, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const optionWrapper = options || {};
            const maybeTxResult = yield new Promise((res, _) => {
                this.api.tx.nominationPools
                    .chill(poolId)
                    .signAndSend(account, optionWrapper, (result) => {
                    (0, common_1.standardCallback)(result, res, waitFor);
                })
                    .catch((reason) => {
                    res((0, neverthrow_1.err)(reason));
                });
            });
            if (maybeTxResult.isErr()) {
                return { isErr: true, reason: maybeTxResult.error };
            }
            const txResult = maybeTxResult.value;
            if (txResult.isError) {
                return { isErr: true, reason: "The transaction was dropped or something." };
            }
            const events = txResult.events;
            const failed = events.find((e) => this.api.events.system.ExtrinsicFailed.is(e.event));
            if (failed != undefined) {
                return { isErr: true, reason: (0, helpers_1.decodeError)(this.api, failed.event.data[0]) };
            }
            const [txHash, txIndex, blockHash, blockNumber] = yield (0, common_1.getBlockHashAndTxHash)(txResult, waitFor, this.api);
            return { isErr: false, events, txHash, txIndex, blockHash, blockNumber };
        });
    }
    claimCommission(poolId, waitFor, account, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const optionWrapper = options || {};
            const maybeTxResult = yield new Promise((res, _) => {
                this.api.tx.nominationPools
                    .claimCommission(poolId)
                    .signAndSend(account, optionWrapper, (result) => {
                    (0, common_1.standardCallback)(result, res, waitFor);
                })
                    .catch((reason) => {
                    res((0, neverthrow_1.err)(reason));
                });
            });
            if (maybeTxResult.isErr()) {
                return { isErr: true, reason: maybeTxResult.error };
            }
            const txResult = maybeTxResult.value;
            if (txResult.isError) {
                return { isErr: true, reason: "The transaction was dropped or something." };
            }
            const events = txResult.events;
            const failed = events.find((e) => this.api.events.system.ExtrinsicFailed.is(e.event));
            if (failed != undefined) {
                return { isErr: true, reason: (0, helpers_1.decodeError)(this.api, failed.event.data[0]) };
            }
            const event = Events.PoolCommissionClaimed.New(txResult.events);
            if (event == undefined) {
                return { isErr: true, reason: "Failed to find PoolCommissionClaimed event." };
            }
            const [txHash, txIndex, blockHash, blockNumber] = yield (0, common_1.getBlockHashAndTxHash)(txResult, waitFor, this.api);
            return { isErr: false, event, events, txHash, txIndex, blockHash, blockNumber };
        });
    }
    claimPayout(waitFor, account, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const optionWrapper = options || {};
            const maybeTxResult = yield new Promise((res, _) => {
                this.api.tx.nominationPools
                    .claimPayout()
                    .signAndSend(account, optionWrapper, (result) => {
                    (0, common_1.standardCallback)(result, res, waitFor);
                })
                    .catch((reason) => {
                    res((0, neverthrow_1.err)(reason));
                });
            });
            if (maybeTxResult.isErr()) {
                return { isErr: true, reason: maybeTxResult.error };
            }
            const txResult = maybeTxResult.value;
            if (txResult.isError) {
                return { isErr: true, reason: "The transaction was dropped or something." };
            }
            const events = txResult.events;
            const failed = events.find((e) => this.api.events.system.ExtrinsicFailed.is(e.event));
            if (failed != undefined) {
                return { isErr: true, reason: (0, helpers_1.decodeError)(this.api, failed.event.data[0]) };
            }
            const event = Events.PaidOut.New(txResult.events);
            const [txHash, txIndex, blockHash, blockNumber] = yield (0, common_1.getBlockHashAndTxHash)(txResult, waitFor, this.api);
            return { isErr: false, event, events, txHash, txIndex, blockHash, blockNumber };
        });
    }
    claimPayoutOther(other, waitFor, account, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const optionWrapper = options || {};
            const maybeTxResult = yield new Promise((res, _) => {
                this.api.tx.nominationPools
                    .claimPayoutOther(other)
                    .signAndSend(account, optionWrapper, (result) => {
                    (0, common_1.standardCallback)(result, res, waitFor);
                })
                    .catch((reason) => {
                    res((0, neverthrow_1.err)(reason));
                });
            });
            if (maybeTxResult.isErr()) {
                return { isErr: true, reason: maybeTxResult.error };
            }
            const txResult = maybeTxResult.value;
            if (txResult.isError) {
                return { isErr: true, reason: "The transaction was dropped or something." };
            }
            const events = txResult.events;
            const failed = events.find((e) => this.api.events.system.ExtrinsicFailed.is(e.event));
            if (failed != undefined) {
                return { isErr: true, reason: (0, helpers_1.decodeError)(this.api, failed.event.data[0]) };
            }
            const event = Events.PaidOut.New(txResult.events);
            const [txHash, txIndex, blockHash, blockNumber] = yield (0, common_1.getBlockHashAndTxHash)(txResult, waitFor, this.api);
            return { isErr: false, event, events, txHash, txIndex, blockHash, blockNumber };
        });
    }
    setClaimPermission(permission, waitFor, account, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const optionWrapper = options || {};
            const maybeTxResult = yield new Promise((res, _) => {
                this.api.tx.nominationPools
                    .setClaimPermission(permission)
                    .signAndSend(account, optionWrapper, (result) => {
                    (0, common_1.standardCallback)(result, res, waitFor);
                })
                    .catch((reason) => {
                    res((0, neverthrow_1.err)(reason));
                });
            });
            if (maybeTxResult.isErr()) {
                return { isErr: true, reason: maybeTxResult.error };
            }
            const txResult = maybeTxResult.value;
            if (txResult.isError) {
                return { isErr: true, reason: "The transaction was dropped or something." };
            }
            const events = txResult.events;
            const failed = events.find((e) => this.api.events.system.ExtrinsicFailed.is(e.event));
            if (failed != undefined) {
                return { isErr: true, reason: (0, helpers_1.decodeError)(this.api, failed.event.data[0]) };
            }
            const [txHash, txIndex, blockHash, blockNumber] = yield (0, common_1.getBlockHashAndTxHash)(txResult, waitFor, this.api);
            return { isErr: false, events, txHash, txIndex, blockHash, blockNumber };
        });
    }
    setCommission(poolId, newCommission, waitFor, account, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const optionWrapper = options || {};
            let commission = null;
            if (newCommission != null) {
                const amount = (0, utils_1.commissionNumberToPerbill)(newCommission.amount);
                if (amount.isErr()) {
                    return { isErr: true, reason: amount.error };
                }
                commission = [amount.value, newCommission.payee];
            }
            const maybeTxResult = yield new Promise((res, _) => {
                this.api.tx.nominationPools
                    .setCommission(poolId, commission)
                    .signAndSend(account, optionWrapper, (result) => {
                    (0, common_1.standardCallback)(result, res, waitFor);
                })
                    .catch((reason) => {
                    res((0, neverthrow_1.err)(reason));
                });
            });
            if (maybeTxResult.isErr()) {
                return { isErr: true, reason: maybeTxResult.error };
            }
            const txResult = maybeTxResult.value;
            if (txResult.isError) {
                return { isErr: true, reason: "The transaction was dropped or something." };
            }
            const events = txResult.events;
            const failed = events.find((e) => this.api.events.system.ExtrinsicFailed.is(e.event));
            if (failed != undefined) {
                return { isErr: true, reason: (0, helpers_1.decodeError)(this.api, failed.event.data[0]) };
            }
            const event = Events.PoolCommissionUpdated.New(txResult.events);
            if (event == undefined) {
                return { isErr: true, reason: "Failed to find PoolCommissionUpdated event." };
            }
            const [txHash, txIndex, blockHash, blockNumber] = yield (0, common_1.getBlockHashAndTxHash)(txResult, waitFor, this.api);
            return { isErr: false, event, events, txHash, txIndex, blockHash, blockNumber };
        });
    }
    withdrawUnbonded(memberAccount, numSlashingSpans, waitFor, account, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const optionWrapper = options || {};
            const maybeTxResult = yield new Promise((res, _) => {
                this.api.tx.nominationPools
                    .withdrawUnbonded(memberAccount, numSlashingSpans)
                    .signAndSend(account, optionWrapper, (result) => {
                    (0, common_1.standardCallback)(result, res, waitFor);
                })
                    .catch((reason) => {
                    res((0, neverthrow_1.err)(reason));
                });
            });
            if (maybeTxResult.isErr()) {
                return { isErr: true, reason: maybeTxResult.error };
            }
            const txResult = maybeTxResult.value;
            if (txResult.isError) {
                return { isErr: true, reason: "The transaction was dropped or something." };
            }
            const events = txResult.events;
            const failed = events.find((e) => this.api.events.system.ExtrinsicFailed.is(e.event));
            if (failed != undefined) {
                return { isErr: true, reason: (0, helpers_1.decodeError)(this.api, failed.event.data[0]) };
            }
            const event = Events.Withdrawn.New(txResult.events);
            if (event == undefined) {
                return { isErr: true, reason: "Failed to find Withdraw event." };
            }
            const [txHash, txIndex, blockHash, blockNumber] = yield (0, common_1.getBlockHashAndTxHash)(txResult, waitFor, this.api);
            return { isErr: false, event, events, txHash, txIndex, blockHash, blockNumber };
        });
    }
    setState(poolId, state, waitFor, account, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const optionWrapper = options || {};
            const maybeTxResult = yield new Promise((res, _) => {
                this.api.tx.nominationPools
                    .setState(poolId, state)
                    .signAndSend(account, optionWrapper, (result) => {
                    (0, common_1.standardCallback)(result, res, waitFor);
                })
                    .catch((reason) => {
                    res((0, neverthrow_1.err)(reason));
                });
            });
            if (maybeTxResult.isErr()) {
                return { isErr: true, reason: maybeTxResult.error };
            }
            const txResult = maybeTxResult.value;
            if (txResult.isError) {
                return { isErr: true, reason: "The transaction was dropped or something." };
            }
            const events = txResult.events;
            const failed = events.find((e) => this.api.events.system.ExtrinsicFailed.is(e.event));
            if (failed != undefined) {
                return { isErr: true, reason: (0, helpers_1.decodeError)(this.api, failed.event.data[0]) };
            }
            const event = Events.StateChanged.New(txResult.events);
            const [txHash, txIndex, blockHash, blockNumber] = yield (0, common_1.getBlockHashAndTxHash)(txResult, waitFor, this.api);
            return { isErr: false, event, events, txHash, txIndex, blockHash, blockNumber };
        });
    }
}
exports.NominationPools = NominationPools;
var Events;
(function (Events) {
    class Bonded {
        constructor(member, poolId, bonded, joined) {
            this.member = member;
            this.poolId = poolId;
            this.bonded = bonded;
            this.joined = joined;
        }
        static New(events) {
            var _a;
            const ed = (_a = events.find((e) => e.event.method == "Bonded" && e.event.section == "nominationPools")) === null || _a === void 0 ? void 0 : _a.event.data;
            if (ed == undefined) {
                return undefined;
            }
            return new Bonded(ed["member"].toString(), ed["poolId"].toString(), ed["bonded"].toString(), ed["joined"].toString());
        }
    }
    Events.Bonded = Bonded;
    class Created {
        constructor(depositor, poolId) {
            this.depositor = depositor;
            this.poolId = poolId;
        }
        static New(events) {
            var _a;
            const ed = (_a = events.find((e) => e.event.method == "Created" && e.event.section == "nominationPools")) === null || _a === void 0 ? void 0 : _a.event.data;
            if (ed == undefined) {
                return undefined;
            }
            return new Created(ed["depositor"].toString(), ed["poolId"].toString());
        }
    }
    Events.Created = Created;
    class Unbonded {
        constructor(member, poolId, balance, points, era) {
            this.member = member;
            this.poolId = poolId;
            this.balance = balance;
            this.points = points;
            this.era = era;
        }
        static New(events) {
            var _a;
            const ed = (_a = events.find((e) => e.event.method == "Unbonded" && e.event.section == "nominationPools")) === null || _a === void 0 ? void 0 : _a.event.data;
            if (ed == undefined) {
                return undefined;
            }
            return new Unbonded(ed["member"].toString(), ed["poolId"].toString(), ed["balance"].toString(), ed["points"].toString(), ed["era"].toString());
        }
    }
    Events.Unbonded = Unbonded;
    class PoolCommissionClaimed {
        constructor(poolId, commission) {
            this.poolId = poolId;
            this.commission = commission;
        }
        static New(events) {
            var _a;
            const ed = (_a = events.find((e) => e.event.method == "PoolCommissionClaimed" && e.event.section == "nominationPools")) === null || _a === void 0 ? void 0 : _a.event.data;
            if (ed == undefined) {
                return undefined;
            }
            return new PoolCommissionClaimed(ed["poolId"].toString(), ed["commission"].toString());
        }
    }
    Events.PoolCommissionClaimed = PoolCommissionClaimed;
    class PaidOut {
        constructor(member, poolId, payout) {
            this.member = member;
            this.poolId = poolId;
            this.payout = payout;
        }
        static New(events) {
            var _a;
            const ed = (_a = events.find((e) => e.event.method == "PaidOut" && e.event.section == "nominationPools")) === null || _a === void 0 ? void 0 : _a.event.data;
            if (ed == undefined) {
                return undefined;
            }
            return new PaidOut(ed["member"].toString(), ed["poolId"].toString(), ed["payout"].toString());
        }
    }
    Events.PaidOut = PaidOut;
    class PoolCommissionUpdated {
        constructor(poolId, current) {
            this.poolId = poolId;
            this.current = current;
        }
        static New(events) {
            var _a;
            const ed = (_a = events.find((e) => e.event.method == "PoolCommissionUpdated" && e.event.section == "nominationPools")) === null || _a === void 0 ? void 0 : _a.event.data;
            if (ed == undefined) {
                return undefined;
            }
            return new PoolCommissionUpdated(ed["poolId"].toString(), ed["current"].toString());
        }
    }
    Events.PoolCommissionUpdated = PoolCommissionUpdated;
    class Withdrawn {
        constructor(member, poolId, balance, points) {
            this.member = member;
            this.poolId = poolId;
            this.balance = balance;
            this.points = points;
        }
        static New(events) {
            var _a;
            const ed = (_a = events.find((e) => e.event.method == "Withdrawn" && e.event.section == "nominationPools")) === null || _a === void 0 ? void 0 : _a.event.data;
            if (ed == undefined) {
                return undefined;
            }
            return new Withdrawn(ed["member"].toString(), ed["poolId"].toString(), ed["balance"].toString(), ed["points"].toString());
        }
    }
    Events.Withdrawn = Withdrawn;
    class StateChanged {
        constructor(poolId, newState) {
            this.poolId = poolId;
            this.newState = newState;
        }
        static New(events) {
            var _a;
            const ed = (_a = events.find((e) => e.event.method == "StateChanged" && e.event.section == "nominationPools")) === null || _a === void 0 ? void 0 : _a.event.data;
            if (ed == undefined) {
                return undefined;
            }
            return new StateChanged(ed["poolId"].toString(), ed["newState"].toString());
        }
    }
    Events.StateChanged = StateChanged;
})(Events || (Events = {}));
