/// <reference types="bn.js" />
import { ApiPromise } from "@polkadot/api";
import { H256, EventRecord } from "@polkadot/types/interfaces/types";
import { BN } from "@polkadot/util";
import { KeyringPair } from "@polkadot/keyring/types";
import { WaitFor, GenericFailure, TransactionOptions } from "./common";
type TransferKeepAliveTxSuccess = {
    isErr: false;
    event: Events.TransferEvent;
    events: EventRecord[];
    txHash: H256;
    txIndex: number;
    blockHash: H256;
    blockNumber: number;
};
type TransferAllowDeathTxSuccess = {
    isErr: false;
    event: Events.TransferEvent;
    event2?: Events.KilledAccount;
    events: EventRecord[];
    txHash: H256;
    txIndex: number;
    blockHash: H256;
    blockNumber: number;
};
type TransferAllTxSuccess = {
    isErr: false;
    event: Events.TransferEvent;
    event2?: Events.KilledAccount;
    events: EventRecord[];
    txHash: H256;
    txIndex: number;
    blockHash: H256;
    blockNumber: number;
};
export declare class Balances {
    private api;
    constructor(api: ApiPromise);
    transferAll(dest: string, keepAlive: boolean, waitFor: WaitFor, account: KeyringPair, options?: TransactionOptions): Promise<TransferAllTxSuccess | GenericFailure>;
    transferAllowDeath(dest: string, value: BN, waitFor: WaitFor, account: KeyringPair, options?: TransactionOptions): Promise<TransferAllowDeathTxSuccess | GenericFailure>;
    transferKeepAlive(dest: string, value: BN, waitFor: WaitFor, account: KeyringPair, options?: TransactionOptions): Promise<TransferKeepAliveTxSuccess | GenericFailure>;
}
export declare namespace Events {
    class TransferEvent {
        from: string;
        to: string;
        amount: string;
        constructor(from: string, to: string, amount: string);
        static New(events: EventRecord[]): TransferEvent | undefined;
    }
    class KilledAccount {
        account: string;
        constructor(account: string);
        static New(events: EventRecord[]): KilledAccount | undefined;
    }
}
export {};
