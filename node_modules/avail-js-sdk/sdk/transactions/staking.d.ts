/// <reference types="bn.js" />
import { ApiPromise } from "@polkadot/api";
import { H256, EventRecord } from "@polkadot/types/interfaces/types";
import { BN } from "@polkadot/util";
import { KeyringPair } from "@polkadot/keyring/types";
import * as TransactionData from "./../transaction_data";
import { WaitFor, GenericFailure, TransactionOptions } from "./common";
export type StakingRewardDestination = "Staked" | "Stash" | "None" | {
    account: string;
};
type BondTxSuccess = {
    isErr: false;
    event: Events.Bonded;
    events: EventRecord[];
    txHash: H256;
    txIndex: number;
    blockHash: H256;
    blockNumber: number;
};
type BondExtraTxSuccess = {
    isErr: false;
    event: Events.Bonded;
    events: EventRecord[];
    txHash: H256;
    txIndex: number;
    blockHash: H256;
    blockNumber: number;
};
type ChillTxSuccess = {
    isErr: false;
    event: Events.Chilled;
    events: EventRecord[];
    txHash: H256;
    txIndex: number;
    blockHash: H256;
    blockNumber: number;
};
type ChillOtherTxSuccess = {
    isErr: false;
    event: Events.Chilled;
    events: EventRecord[];
    txHash: H256;
    txIndex: number;
    blockHash: H256;
    blockNumber: number;
};
type UnbondTxSuccess = {
    isErr: false;
    event: Events.Unbonded;
    events: EventRecord[];
    txHash: H256;
    txIndex: number;
    blockHash: H256;
    blockNumber: number;
};
type ValidatexSuccess = {
    isErr: false;
    event: Events.ValidatorPrefsSet;
    events: EventRecord[];
    txHash: H256;
    txIndex: number;
    blockHash: H256;
    blockNumber: number;
};
type NominateTxSuccess = {
    isErr: false;
    txData: TransactionData.Staking.Nominate;
    events: EventRecord[];
    txHash: H256;
    txIndex: number;
    blockHash: H256;
    blockNumber: number;
};
export declare class Staking {
    private api;
    constructor(api: ApiPromise);
    bond(value: BN, payee: StakingRewardDestination, waitFor: WaitFor, account: KeyringPair, options?: TransactionOptions): Promise<BondTxSuccess | GenericFailure>;
    bondExtra(maxAdditional: BN, waitFor: WaitFor, account: KeyringPair, options?: TransactionOptions): Promise<BondExtraTxSuccess | GenericFailure>;
    chill(waitFor: WaitFor, account: KeyringPair, options?: TransactionOptions): Promise<ChillTxSuccess | GenericFailure>;
    chillOther(stash: string, waitFor: WaitFor, account: KeyringPair, options?: TransactionOptions): Promise<ChillOtherTxSuccess | GenericFailure>;
    nominate(targets: string[], waitFor: WaitFor, account: KeyringPair, options?: TransactionOptions): Promise<NominateTxSuccess | GenericFailure>;
    unbond(value: BN, waitFor: WaitFor, account: KeyringPair, options?: TransactionOptions): Promise<UnbondTxSuccess | GenericFailure>;
    validate(commission: number, blocked: boolean, waitFor: WaitFor, account: KeyringPair, options?: TransactionOptions): Promise<ValidatexSuccess | GenericFailure>;
}
export declare namespace Events {
    class Bonded {
        stash: string;
        amount: string;
        constructor(stash: string, amount: string);
        static New(events: EventRecord[]): Bonded | undefined;
    }
    class Chilled {
        stash: string;
        constructor(stash: string);
        static New(events: EventRecord[]): Chilled | undefined;
    }
    class Unbonded {
        stash: string;
        amount: string;
        constructor(stash: string, amount: string);
        static New(events: EventRecord[]): Unbonded | undefined;
    }
    class ValidatorPrefsSet {
        stash: string;
        commission: string;
        blocked: string;
        constructor(stash: string, commission: string, blocked: string);
        static New(events: EventRecord[]): ValidatorPrefsSet | undefined;
    }
}
export {};
