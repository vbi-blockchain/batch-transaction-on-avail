"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Events = exports.Staking = void 0;
const util_1 = require("@polkadot/util");
const neverthrow_1 = require("neverthrow");
const TransactionData = __importStar(require("./../transaction_data"));
const helpers_1 = require("../../helpers");
const common_1 = require("./common");
const utils_1 = require("../utils");
class Staking {
    constructor(api) {
        this.api = api;
    }
    bond(value, payee, waitFor, account, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const optionWrapper = options || {};
            const maybeTxResult = yield new Promise((res, _) => {
                this.api.tx.staking
                    .bond(value, payee)
                    .signAndSend(account, optionWrapper, (result) => {
                    (0, common_1.standardCallback)(result, res, waitFor);
                })
                    .catch((reason) => {
                    res((0, neverthrow_1.err)(reason));
                });
            });
            if (maybeTxResult.isErr()) {
                return { isErr: true, reason: maybeTxResult.error };
            }
            const txResult = maybeTxResult.value;
            if (txResult.isError) {
                return { isErr: true, reason: "The transaction was dropped or something." };
            }
            const failed = txResult.events.find((e) => this.api.events.system.ExtrinsicFailed.is(e.event));
            if (failed != undefined) {
                return { isErr: true, reason: (0, helpers_1.decodeError)(this.api, failed.event.data[0]) };
            }
            const event = Events.Bonded.New(txResult.events);
            if (event == undefined) {
                return { isErr: true, reason: "Failed to find Bonded event." };
            }
            const events = txResult.events;
            const [txHash, txIndex, blockHash, blockNumber] = yield (0, common_1.getBlockHashAndTxHash)(txResult, waitFor, this.api);
            return { isErr: false, event, events, txHash, txIndex, blockHash, blockNumber };
        });
    }
    bondExtra(maxAdditional, waitFor, account, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const optionWrapper = options || {};
            const maybeTxResult = yield new Promise((res, _) => {
                this.api.tx.staking
                    .bondExtra(maxAdditional)
                    .signAndSend(account, optionWrapper, (result) => {
                    (0, common_1.standardCallback)(result, res, waitFor);
                })
                    .catch((reason) => {
                    res((0, neverthrow_1.err)(reason));
                });
            });
            if (maybeTxResult.isErr()) {
                return { isErr: true, reason: maybeTxResult.error };
            }
            const txResult = maybeTxResult.value;
            if (txResult.isError) {
                return { isErr: true, reason: "The transaction was dropped or something." };
            }
            const failed = txResult.events.find((e) => this.api.events.system.ExtrinsicFailed.is(e.event));
            if (failed != undefined) {
                return { isErr: true, reason: (0, helpers_1.decodeError)(this.api, failed.event.data[0]) };
            }
            const event = Events.Bonded.New(txResult.events);
            if (event == undefined) {
                return { isErr: true, reason: "Failed to find Bonded event." };
            }
            const events = txResult.events;
            const [txHash, txIndex, blockHash, blockNumber] = yield (0, common_1.getBlockHashAndTxHash)(txResult, waitFor, this.api);
            return { isErr: false, event, events, txHash, txIndex, blockHash, blockNumber };
        });
    }
    chill(waitFor, account, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const optionWrapper = options || {};
            const maybeTxResult = yield new Promise((res, _) => {
                this.api.tx.staking
                    .chill()
                    .signAndSend(account, optionWrapper, (result) => {
                    (0, common_1.standardCallback)(result, res, waitFor);
                })
                    .catch((reason) => {
                    res((0, neverthrow_1.err)(reason));
                });
            });
            if (maybeTxResult.isErr()) {
                return { isErr: true, reason: maybeTxResult.error };
            }
            const txResult = maybeTxResult.value;
            if (txResult.isError) {
                return { isErr: true, reason: "The transaction was dropped or something." };
            }
            const failed = txResult.events.find((e) => this.api.events.system.ExtrinsicFailed.is(e.event));
            if (failed != undefined) {
                return { isErr: true, reason: (0, helpers_1.decodeError)(this.api, failed.event.data[0]) };
            }
            const event = Events.Chilled.New(txResult.events);
            if (event == undefined) {
                return { isErr: true, reason: "Failed to find Chilled event." };
            }
            const events = txResult.events;
            const [txHash, txIndex, blockHash, blockNumber] = yield (0, common_1.getBlockHashAndTxHash)(txResult, waitFor, this.api);
            return { isErr: false, event, events, txHash, txIndex, blockHash, blockNumber };
        });
    }
    chillOther(stash, waitFor, account, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const optionWrapper = options || {};
            const maybeTxResult = yield new Promise((res, _) => {
                this.api.tx.staking
                    .chillOther(stash)
                    .signAndSend(account, optionWrapper, (result) => {
                    (0, common_1.standardCallback)(result, res, waitFor);
                })
                    .catch((reason) => {
                    res((0, neverthrow_1.err)(reason));
                });
            });
            if (maybeTxResult.isErr()) {
                return { isErr: true, reason: maybeTxResult.error };
            }
            const txResult = maybeTxResult.value;
            if (txResult.isError) {
                return { isErr: true, reason: "The transaction was dropped or something." };
            }
            const failed = txResult.events.find((e) => this.api.events.system.ExtrinsicFailed.is(e.event));
            if (failed != undefined) {
                return { isErr: true, reason: (0, helpers_1.decodeError)(this.api, failed.event.data[0]) };
            }
            const event = Events.Chilled.New(txResult.events);
            if (event == undefined) {
                return { isErr: true, reason: "Failed to find Chilled event." };
            }
            const events = txResult.events;
            const [txHash, txIndex, blockHash, blockNumber] = yield (0, common_1.getBlockHashAndTxHash)(txResult, waitFor, this.api);
            return { isErr: false, event, events, txHash, txIndex, blockHash, blockNumber };
        });
    }
    nominate(targets, waitFor, account, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const optionWrapper = options || {};
            const maybeTxResult = yield new Promise((res, _) => {
                this.api.tx.staking
                    .nominate(targets)
                    .signAndSend(account, optionWrapper, (result) => {
                    (0, common_1.standardCallback)(result, res, waitFor);
                })
                    .catch((reason) => {
                    res((0, neverthrow_1.err)(reason));
                });
            });
            if (maybeTxResult.isErr()) {
                return { isErr: true, reason: maybeTxResult.error };
            }
            const txResult = maybeTxResult.value;
            if (txResult.isError) {
                return { isErr: true, reason: "The transaction was dropped or something." };
            }
            const failed = txResult.events.find((e) => this.api.events.system.ExtrinsicFailed.is(e.event));
            if (failed != undefined) {
                return { isErr: true, reason: (0, helpers_1.decodeError)(this.api, failed.event.data[0]) };
            }
            const events = txResult.events;
            const [txHash, txIndex, blockHash, blockNumber] = yield (0, common_1.getBlockHashAndTxHash)(txResult, waitFor, this.api);
            const maybeTxData = yield TransactionData.Staking.Nominate.New(this.api, txHash, blockHash);
            if (maybeTxData.isErr()) {
                return { isErr: true, reason: maybeTxData.error };
            }
            return {
                isErr: false,
                txData: maybeTxData.value,
                events,
                txHash,
                txIndex,
                blockHash,
                blockNumber,
            };
        });
    }
    unbond(value, waitFor, account, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const optionWrapper = options || {};
            const maybeTxResult = yield new Promise((res, _) => {
                this.api.tx.staking
                    .unbond(value)
                    .signAndSend(account, optionWrapper, (result) => {
                    (0, common_1.standardCallback)(result, res, waitFor);
                })
                    .catch((reason) => {
                    res((0, neverthrow_1.err)(reason));
                });
            });
            if (maybeTxResult.isErr()) {
                return { isErr: true, reason: maybeTxResult.error };
            }
            const txResult = maybeTxResult.value;
            if (txResult.isError) {
                return { isErr: true, reason: "The transaction was dropped or something." };
            }
            const failed = txResult.events.find((e) => this.api.events.system.ExtrinsicFailed.is(e.event));
            if (failed != undefined) {
                return { isErr: true, reason: (0, helpers_1.decodeError)(this.api, failed.event.data[0]) };
            }
            const event = Events.Unbonded.New(txResult.events);
            if (event == undefined) {
                return { isErr: true, reason: "Failed to find Unbonded event." };
            }
            const events = txResult.events;
            const [txHash, txIndex, blockHash, blockNumber] = yield (0, common_1.getBlockHashAndTxHash)(txResult, waitFor, this.api);
            return { isErr: false, event, events, txHash, txIndex, blockHash, blockNumber };
        });
    }
    validate(commission, blocked, waitFor, account, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const maybeCommission = (0, utils_1.commissionNumberToPerbill)(commission);
            if (maybeCommission.isErr()) {
                return { isErr: true, reason: maybeCommission.error };
            }
            const validatorPerfs = { commission: maybeCommission.value, blocked };
            const optionWrapper = options || {};
            const maybeTxResult = yield new Promise((res, _) => {
                this.api.tx.staking
                    .validate(validatorPerfs)
                    .signAndSend(account, optionWrapper, (result) => {
                    (0, common_1.standardCallback)(result, res, waitFor);
                })
                    .catch((reason) => {
                    res((0, neverthrow_1.err)(reason));
                });
            });
            if (maybeTxResult.isErr()) {
                return { isErr: true, reason: maybeTxResult.error };
            }
            const txResult = maybeTxResult.value;
            if (txResult.isError) {
                return { isErr: true, reason: "The transaction was dropped or something." };
            }
            const failed = txResult.events.find((e) => this.api.events.system.ExtrinsicFailed.is(e.event));
            if (failed != undefined) {
                return { isErr: true, reason: (0, helpers_1.decodeError)(this.api, failed.event.data[0]) };
            }
            const event = Events.ValidatorPrefsSet.New(txResult.events);
            if (event == undefined) {
                return { isErr: true, reason: "Failed to find ValidatorPrefsSet event." };
            }
            const events = txResult.events;
            const [txHash, txIndex, blockHash, blockNumber] = yield (0, common_1.getBlockHashAndTxHash)(txResult, waitFor, this.api);
            return { isErr: false, event, events, txHash, txIndex, blockHash, blockNumber };
        });
    }
}
exports.Staking = Staking;
var Events;
(function (Events) {
    class Bonded {
        constructor(stash, amount) {
            this.stash = stash;
            this.amount = amount;
        }
        static New(events) {
            var _a;
            const ed = (_a = events.find((e) => e.event.method == "Bonded")) === null || _a === void 0 ? void 0 : _a.event.data;
            if (ed == undefined) {
                return undefined;
            }
            const amountString = ed["amount"].toString();
            const amount = new util_1.BN(amountString).div(new util_1.BN(10).pow(new util_1.BN(18))).toString();
            return new Bonded(ed["stash"].toString(), amount);
        }
    }
    Events.Bonded = Bonded;
    class Chilled {
        constructor(stash) {
            this.stash = stash;
        }
        static New(events) {
            var _a;
            const ed = (_a = events.find((e) => e.event.method == "Chilled")) === null || _a === void 0 ? void 0 : _a.event.data;
            if (ed == undefined) {
                return undefined;
            }
            return new Chilled(ed["stash"].toString());
        }
    }
    Events.Chilled = Chilled;
    class Unbonded {
        constructor(stash, amount) {
            this.stash = stash;
            this.amount = amount;
        }
        static New(events) {
            var _a;
            const ed = (_a = events.find((e) => e.event.method == "Unbonded")) === null || _a === void 0 ? void 0 : _a.event.data;
            if (ed == undefined) {
                return undefined;
            }
            return new Unbonded(ed["stash"].toString(), ed["amount"].toString());
        }
    }
    Events.Unbonded = Unbonded;
    class ValidatorPrefsSet {
        constructor(stash, commission, blocked) {
            this.stash = stash;
            this.commission = commission;
            this.blocked = blocked;
        }
        static New(events) {
            var _a;
            const ed = (_a = events.find((e) => e.event.method == "ValidatorPrefsSet")) === null || _a === void 0 ? void 0 : _a.event.data;
            if (ed == undefined) {
                return undefined;
            }
            return new ValidatorPrefsSet(ed["stash"].toString(), ed["prefs"]["commission"].toString(), ed["prefs"]["blocked"].toString());
        }
    }
    Events.ValidatorPrefsSet = ValidatorPrefsSet;
})(Events || (exports.Events = Events = {}));
